모든 프로그램은 메모리 공간에서 실행된다.

프로그램의 구조(기본 골격)
- 처리할 값을 입력
- 처리(계산/연산)
- 처리한 결과를 출력

이런 작업들을 위한 준비가 필요하다.

입력을 받기위한 준비인 공간을 먼저 만든다.

각각의 작업에서 필요한 공간(변수)를 고려.

변수 작성법
이름을 지어주고 값을 넣자.

일반적인 프로그래밍 언어의 명명(작명) 규칙
1. 알파벳 대문자, 소문자, 숫자, 특수기호(_)
2. 첫글자가 숫자가 되면 안된다.
3. 미리 정해진 '약속된 단어(예약어)'는 
   사용할 수 없다.(char, int 등)
4. 여러 단어를 사용하여 이름을 지을 때 
   단어 사이에 공백이 들어가면 안된다.
5. 대소문자를 구분한다.(TEST, test는 다르다)

공백없이 작명하는 방법
  카멜케이스 - firstNumber
  스네이크케이스 - first_number
  케밥케이스 - first-number
  파스칼케이스 - FirstNumber

입력과 출력
1. 입력 input()
    키보드로부터 값을 입력 받아서 변수에 전달
    형식>
        변수 = input('안내문구')

    컴퓨터는 입력을 무조건 문자열로 받는다.

2. 출력 print()
    값, 변수를 ()안에 넣으면 모니터에 출력하는 함수.
    ()안에 쉼표 구분해서 여러 값 또는 변수를 작성.
    값 사이에 공백을 출력해서 구분.

    '변수의 값을 사용한다.'의 의미?
    변수에 저장되어 있는 값을 복사해서 쓴다.

값을 처리해 보자(처리 명령어 = 연산자)
1. 대입 연산자(값을 변수에 저장하는 연산자)
    = (이퀄기호) : 연산자 오른쪽의 값(변수)을 왼쪽의
                  변수에 저장.
2. 산술 연산자(수학적 계산을 위한 연산자)
    +, -, *, /
    계산 결과는 어딘가(변수)에 저장하거나 출력해야 한다!
3. 비교 연산자(판단을 위해 필요한 연산자)
    ==, !=, >, >=, <, <=
    !(NOT) - 부정의 의미를 갖는다.
    '='를 대입에서 쓰기 때문에 '=='를 붙여서 쓴다. 

판단을 위한 명령어(분기문) - 제어문 중 분기.
    if (만약 ~라면 ~해)

    특정 코드가 제어문의 영향에 있다.
    (소속되어 있다. 해당 제어문 범위 안에 있다. -> scope)
    파이썬은 들여쓰기를 한다.

    형식1> 
    if 조건식:
        실행할 문장1
        실행할 문장2

    조건식의 결과가 참(True)라면 실행할 문장1, 2를 처리,
    결과가 거짓(False)라면 범위안의 문장들을 실행하지 않는다.

    형식2>
    if 조건식:
        실행할 문장들
    else:
        다른 실행 문장들

    조건식이 True면 '실행할 문장들'을 처리,
    False면 '다른 실행 문장들'을 처리.

    형식3>
    if 조건식1:
        실행할 문장들1
    elif 조건식2:
        실행할 문장들2
   [elif 조건식3:
        실행할 문장들3
        ...
    else:
        다른 실행 문장들]

통합 개발 환경(IDE) - Visual studio code
편집기(Editor) + 컴파일러(빌더) + 디버거(Debugger)